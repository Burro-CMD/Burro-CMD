<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac环境下安装Python3]]></title>
    <url>%2F2019%2F08%2F23%2F%E5%9C%A8Mac%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%AE%89%E8%A3%85Python3%2F</url>
    <content type="text"><![CDATA[欢迎参与讨论，转载请注明出处。 前言 MacOS Mojave:10.14.5 检查Mac自带Python版本 在Launchpad找到终端，输入Python； 终端显示Python2.7.10，按住Control+D来退出Python运行环境。 安装X-code 在终端输入X-code-select –install, 按Enter； 安装完成，在终端输入X-code-select -p来检查Xcode的安装位置，按住Control+D结束命令。 安装Brew 打开Brew官网：https://brew.sh, 在brew官网复制/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)，粘贴到Mac终端，按Enter，安装完成之后显示Installation successful 安装Python3 在终端输入brew install python3，等待安装完成。 在终端输入Python3，会显示输Python3的版本。]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>X-code</tag>
        <tag>Brew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[申请美国EVUS（签证更新电子系统）]]></title>
    <url>%2F2019%2F08%2F23%2F%E7%BE%8E%E5%9B%BDEVUS%2F</url>
    <content type="text"><![CDATA[前言 Q&amp;A Q: 什么是签证更新电子系统? A: 签证更新电子系统，或EVUS，是一个电子平台，用于确定持有十年B1, B2或B1/B2访客签证的旅客因临时商务或旅游前来美国旅行的资格。符合这一描述的旅客必须在前往美国之前进行EVUS登记。 Q: 如果我已经得到了签证，为什么还需要进行EVUS登记？ A: 如果您持有B1，B2或B1/B2的访客签证前往美国进行短期商务和旅游，根据美国移民法的规定，您必须完成EVUS登记。 Q: EVUS和签证之间的区别是什么？ A: EVUS登记不是签证。它不符合律或法规的要求以替代美国签证，当根据美国法律要求签证时。计划前往美国访问的旅客出行必须持有有效的B1，B2或B1 / B2级访客签证。身为中华人民共和国公民/国民的旅客仅持有有效的十年B1，B2或B1 / B2级签证，必须在EVUS上申请登记，并且在行前持有签证。如果您已在EVUS登记并抵达机场，该旅客将可以前往美国。其他任何非B1，B2或B1 / B2具有十年有效期类型的签证，不需要申请EVUS登记。 Q: 如何重新注册您的签证更新电子系统? A: 成功的EVUS注册通常有效期为两年（自注册之日起），或护照到期的前六个月，或签证到期（以较早者为准）。 如果您的EVUS即将到期或者已经到期的原因是由于护照有效期的问题而引起的，那么请联系您的护照签发机构或离您最近的中国大使馆，并按照他们的指示更新您的护照。然后用您的新护照信息重新注册EVUS。如果您的EVUS即将到期或者已经到期的原因是由于EVUS两年有效期而引起的，请登陆我们的官方网站https://www.evus.gov. 重新注册一份 新的EVUS. 申请流程Step1点击右上角“中国”，选择中文系统。 Step2点击“新登记申请” Step3选择“个人登记”，如有同行的人，可选择“团体登记”。请确保已拥有登记所需的前提材料 Step4点击同意免责声明，点击“下一步”。 Step5填写旅行文件信息，点击“下一步” Step6填写登记者相关信息。 Step7填写旅行信息，如果在美国没有联系人，可以写unknown。 1Noted: 因为是商务，所以这边我是写了美国的联系人的，个人觉得这很大程度上能够快速通过的原因之一。 Step8资格问题，如实填写 Step9检查登记，全面检查一下信息是否正确。 Step10提交登记申请。如果没有问题，就可以点击“提交”申请。 Step11等待处理 Step12查询EVUS申请状态。 Step13登记成功。我是过了5分钟就通过了，下面是申请通过的图片 参考网站： EVUS官网：https://www.evus.gov 美国驻华大使馆和领事馆：https://china.usembassy-china.org.cn/zh/visas-zh/nonimmigrant-visas-zh/evus-zh/ 贴吧：https://tieba.baidu.com/p/4879012773]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>EVUS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atom使用]]></title>
    <url>%2F2019%2F08%2F14%2FAtom%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Packages1. Simplified-chinese-menuAtom 的简体中文汉化语言包,目前最全的汉化包。包含菜单汉化、右键菜单汉化以及设置汉化。 2. Emmet前端开发都懂得的，html 代码补全，使用方法还有文档可以查阅 emmet使用文档。 3. File-icons不同格式的文本显示 不同颜色和类型的图标，便于分辨。 4. Color-picker顾名思义，颜色采集器，非常清晰好用。快捷键 ctrl+alt+option 启动使用。 5. Atom-beautify美化格式插件，规范缩进，删除多余空行等等。快捷键 ctrl+option+b 启动使用。 6. Markdown-scroll-syncatom 自带markdown 预览功能，快捷键 ctrl+shift+m 会打开两个面板的视图，但文档太长的时候，不会跟着同步滚动，这个插件就是做这个用的，滚动文档的时候预览内容同步滚动。 7. Minimap编辑器右侧小面板，快捷展示当前编辑的内容在整个文档中的位置。同 sublime 极为相似。 8. Docblocker便捷的添加注释代码，/** 按 tab 键即添加注释代码快。 9. Atom-terminal-panel快速调取使用终端面板，快捷键 ctrl+ `启动，底部工具条的 + 也可以点击展示终端面板。 10. Activate-power-mode输入时有震撼效果，这个插件纯粹是用来炫技的，只适合拿来玩玩，长时间使用，我相信你的视力一定会下降的，不要怪我没提醒你哦。 11. Gist-it快速分享代码到gist.github.com 12. Sync-settings插件备份、按键绑定备份 13. Browser-plus编辑器内置浏览器 14. Linter代码校验工具 15. Autocomplete-paths填写路径的时候有提示 常用快捷键 Command Description Shft+cmd+p 命令版(可以看到所有快捷键) alt + shift + s 查看文件相关语言的代码块(snippet) cmd + f 搜索当前文件 cmd+shift+f 搜索整个项目 alt + cmd + [ 代码折叠, 我不喜欢用 alt + cmd + ] 代码展开 cmd + / 快速注释当前行 cmd + [ 代码左缩进 cmd + ] 代码右缩进 cmd + b 快速跳转打开的文件 alt+B或alt+left 光标按单词左移 alt+F或alt+right 光标按单词右移 cmd+right或ctrl+e 光标移动到行最右最后一个非空字符 cmd+left或ctrl+a 光标移动到行最左第一个非空字符 cmd + up 光标移动到文件头 cmd + down 贯标移动到文件尾 ctrl + g 行跳转, 语法为行号:列号 cmd + r 按当前文件方法跳转 cmd + t 全项目模糊查找关键字并跳转 ctrl + m 按照括号匹配跳转 cmd + F2或cmd+fn+f2 给某一行设置书签显示在行号右侧]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atom中Markdown语法]]></title>
    <url>%2F2019%2F08%2F14%2FAtom%E4%B8%ADMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标题123一级标题 语法：#+空格二级标题 语法：##+空格三级标题 语法：###+空格 效果： 一级标题二级标题三级标题列表1无序列表 语法：-+空格 效果： 无序1 无序2 无序3 1有序列表 语法：1.+空格 效果： 有序1 有序2 有序3 引用或强调1引用或强调 语法: ```内容```和&gt; +空格 效果： 123静夜思窗前看月光抬头望山月 静夜思窗前看月光抬头望山月 加粗1加粗 语法: **内容**或者__内容__ 效果：我是需要加粗的内容 斜体1斜体 语法: *内容*或者__内容__ 效果：我是需要斜体的内容 斜粗体1斜粗体 语法：***内容***或者___内容___ 我是需要粗斜体的内容 删除线1删除线 语法：~~删除线~~ 效果：删除线 粗斜体删除1粗斜体删除 语法：***~~粗斜体删除~~***或者~~***粗斜体删除***~~ 我是需要粗斜体删除的内容 插入分割线1插入分割线 语法：---或者____或者*** 效果： 下划线1下划线 语法：&lt;u&gt;这是需要下划线的内容&lt;/u&gt; 效果：这是需要下划线的内容 文本居中1文本居中 语法：&lt;center&gt;这是要居中的文本内容&lt;/center&gt; 效果：这是要居中的文本内容 Todo列表1234Todo列表 语法： * [x] Java * [ ] C * [ ] C++ 效果： Java C C++ 换行123换行 语法： 方法1.连续两个空格+回车 方法2.使用html语言换行标签&lt;br&gt; 效果：这是第一行，这是第二行。这是第一行，这是第二行。 添加注脚123添加注脚 语法：this is a basic footnot [^1]说明：需要在站点根目录下安装插件：命令：npm install hexo-reference --save 效果： this is a basic footnot [1] 缩进字符1234缩进字符 语法： &amp;nbsp;&amp;nbsp;不断行的空白格&amp;nbsp;或&amp;#160; &amp;ensp;&amp;ensp;半角的空白&amp;ensp;或&amp;#8194; &amp;emsp;&amp;emsp;全角的空白&amp;emsp;或&amp;#8195; 效果：&nbsp;&nbsp;不断行的空白格&nbsp;或&#160;&ensp;&ensp;半角的空白&ensp;或&#8194;&emsp;&emsp;全角的空白&emsp;或&#8195; 特殊符号123456789101112特殊符号 语法：\\ 反斜线 \` 反引号 \* 星号 \_ 底线 \&#123;\&#125; 花括号 \[\] 方括号 \(\) 括弧 \# 井号 \+ 加号 \- 减号 \. 英文句点 \! 惊叹号 效果：\ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井号+ 加号- 减号. 英文句点! 惊叹号 存放代码块1存放代码块 语法：```代码 12345678效果：``` javascriptwindows.onload=function()&#123; console.log("反斜杠```用来存放代码")&#125; 表格123456表格 语法： &lt;center&gt;行1 |&lt;center&gt;行2 |&lt;center&gt;行3 :----: | :----: | :----: 小程序 | vue | 菜鸟 search | 工程师 | 码农&lt;center&gt;表示表头居中，:在最左边表示左对齐，:在最右边表示右对齐，左右两边都有:表示居中。 效果： 行1 行2 行3 小程序 vue 菜鸟 search web前段开发工程师 码农 链接1行内形式 语法：[链接文字](链接网址“标题”) 效果： Example: This is an example link. Example: This is an 百度. 1234参考形式 语法： [链接文字][name] [name]: link "Title" 语法示例： 123456我使用 [Google][1] 进行学术搜索多一些,使用 [百度][2]进行日常搜索多一些，很少使用[Bing][3] .我不能一边使用 [百度搜索][2] 一边骂他不如 [Google][1]，我们需要学会的是利用资源。[1]: https://www.google.com/ "Google"[2]: https://www.baidu.com/ "Baidu Search"[3]: https://cn.bing.com/ "Bing Search" 效果：早饭后，我打开 每日英语听力 学习英语。遇到不懂的英语单词，我借助 欧路在线词典查看释义并加入生词本，方便使用 客户端 随时记忆单词。 图片1234插入互联网上图片 语法： 我的笔记本上装了 openSUSE Leap: ![opensuse-laptop](https://www.opensuse.org/build/images/opensuse-laptop.gif)说明：鼠标右键复制图片地址。 效果：我在我的笔记本上装了 openSUSE Leap: 123行内形式： 语法：![alt text](图片网址 "Title")说明：alt text 是替换文本；alt 属性规定在图像无法显示时的替代文本。虽然 alt text 可以不填，但推荐还是填上。Title 是可选项，可以不屑，鼠标悬停与图片上会出现的标题文字。 效果： 1.这是脚注 ↩]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Atom</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac环境下使用GitHub和Hexo搭建博客]]></title>
    <url>%2F2019%2F08%2F13%2F%E5%9C%A8Mac%E5%B9%B3%E5%8F%B0%E4%BD%BF%E7%94%A8GitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[欢迎参与讨论，转载请注明出处。 前言 一直想用一种方式来记录生活以及职业中的感受，所以接触到在Hexo上创建博客，在Github上托管。 本次博客搭建平台为Mac OS Mojave, 10.14.5，目前发现跟系统的特性没多大关联。这也是借鉴前辈的经验来搭建的，以下操作有做修改，有问题的欢迎各位指出，感谢。 部署GitHub前言 本次博客的发布网站是在GitHub的GitHub Pages仓库，通过把网站文件存放到这种仓库里，你便可以利用GitHub提供给你的外链访问它。 声明：以下部分内容转载自铁锚的创建GitHub技术博客全攻略和Musoucrow的在Mac平台使用GitHub和Hexo搭建博客。 注册账号 前往GitHub，参考下图输入账号、邮箱、密码，然后点击注册按钮。 初始设置 注册完成后，选择Free免费账号完成设置。 验证邮箱 请打开你的邮箱，查看发送给你的确认邮件。你需要验证邮箱后，后面生成的个人主页才会被接受和发布。 创建页面仓库 前往创建仓库，参考下图。 仓库的名字需要和你的账号对应， 如 tiemaocsdn.github.io。 输入基本信息，然后点击创建仓库。 后记 当你创建完页面仓库后，此时你的个人页面https://username.github.io/，已经创建完成（username即你的GitHub用户名，下同），虽然还是空无一物，不过你已可以进行下一步了。 安装前置软件前言 在进行安装核心软件之前，你需要先准备好其所依赖的软件。包括Git、NPM和Node.js。 安装Homebrew 在Mac OS下，你可以选择通过Homebrew来进行许多服务类软件的安装（这样会方便很多），在其他系统下也有类似的替代方案。 打开终端, 输入以下脚本。 /usr/bin/ruby -e &quot;$(curl -fsSL &lt;https://raw.githubusercontent.com/Homebrew/install/master/install&gt;)&quot; 等待安装完成后，在终端输入brew进行调试，如无报错则可继续。 通过Homebrew安装其余软件 如果你不用Homebrew，那么请通过其他方式进行下载并安装（例如官网）。以下演示使用Homebrew安装他们，一样是通过终端输入，需要按照顺序。 brew install git brew install node brew install npm 与Homebrew一样，安装完成后，你可以尝试依次在终端输入git、node、npm进行调试，如无报错则可继续。 后记 如果你觉得Homebrew的速度很慢，那么你可以考虑选择更换镜像。请通过搜索引擎寻找相关资料。 安装Hexo及主题前言 本次博客的框架源自Hexo，我们通过使用它来搭建出博客。Hexo基于Node.js，所以我们可以使用NPM来安装它，这在其他系统下也是一样的。 使用NPM安装 与之前一样，在终端输入以下内容（选择其中之一），你的网络如果不是很好的话，可以选择方案二（通过淘宝镜像进行下载）。 npm install -g hexo-cli npm install -g hexo-cli –registry=https://registry.npm.taobao.org 新建博客工程 接下来你需要在终端切换到你觉得合适的目录下通过Hexo新建你的博客工程（也可以不管，只要你知道当前终端目录的所在）。例如（目录可通过拖动文件夹到终端指定）： cd /Users/Username/Documents/Bolg hexo init 经过一段时间后便会在Bolg文件夹下新建一堆文件，如下图这般，如无报错则可继续。 关于博客主题 在你新建博客工程后仍需要选择一个主题(theme)应用到博客里，主题文件位于博客工程下的themes目录，默认便存在一款名为landscape的主题。你可以选择从Hexo官网的主题专栏下载其他主题。 以下便以本博客所使用的NexT为范例进行演示。接下来的内容将会参考这里。 安装NexT主题 前往发布页面选择你想要的版本（下图0.5.0版仅为示范），下载解压后获得Next主题，然后将其以文件夹的形式放到themes目录下。 贴士：你可以考虑像我这样把解压后的文件夹名称更改为next，这样会更清晰。 后记 关于主题的选择其实远不止官网所刊，关于这些方面的你可以多去寻觅甚至自己动手丰衣足食！ 部署博客前言 接下来我们要确立一个概念：在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于博客工程目录（根目录）下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。 启用主题并调试 打开站点配置文件，找到theme字段，并将其值更改为next（主题文件夹名称）。到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用. 首先打开终端并切换目录到博客工程，输入 hexo server --debug 进行网站调试。当命令行输出中提示出： INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问http://localhost:4000 ，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse。 现在，你已经成功安装并启用了 NexT 主题。你现在可以在终端按下Ctrl+C结束调试，下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。 个性化设置 打开站点配置文件( _config.yml)，你可以修改以下字段来实现： language 设置成你所需要的语言，例如：language: zh-Hans 目前 NexT 支持的语言如以下表格所示：language author 设置author为你的昵称，例如：Musoucrow 打开主题配置文件，你可以修改以下字段来实现： avatar 设置成头像的链接地址，例如：avatar: http://example.com/avatar.png 其中，头像的链接地址可以是：avatar scheme Scheme是NexT提供的一种特性，借助于Scheme，NexT为你提供多种不同的外观。同时，几乎所有的配置都可以 在Scheme之间共用。目前NexT支持三种Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 搜索scheme关键字。 你会看到有三行scheme的配置，将你需用启用的scheme前面注释#即可。scheme menu 设定菜单内容，可通过解除几个自带项的注释#来开启栏目。 也可以自己进行新增，格式为item name: link。 item name是一个名称，这个名称并不直接显示在页面上，它将用于匹配图标以及翻译。 NexT 默认的菜单项有（标注！的项表示需要手动创建这个页面）：menu social social可让博客的侧栏里的角色介绍栏目下增加链接项（可添加多个），你可以这样设置：social1 博客的具体效果为：social2 新建标签和分类栏目 回到终端，仍然是博客工程目录下，依次输入以下两句： hexo new page tags hexo new page categories 这样便创建好了标签和分类栏目的页面文件，但仍需要做一些处理。 打开source/categories/index.md和source/tags/index.md，分别修改成： title: categoriesdate: 2017-02-25 21:43:34comments: falsetype: “categories” date: 2017-02-25 22:40:53tcomments: falsettype: “tags” 你现在可以再次调试一下看看效果，不出意外的话，已经实现了标签和分类栏目。记得要先结束之前的网站调试（在调试终端下按Ctrl+C），再重新进行。 后记 静态站点拥有一定的局限性，因此我们需要借助于第三方服务来扩展站点的功能。 以下是 NexT 目前支持的第三方服务，你可以根据你的需求集成一些功能进来。详情查看 发表帖子前言 博客的帖子是Markdown格式（后缀名为.md），如果你尚未熟悉，请去进行专门的学习。 新建帖子 在终端、博客工程目录下输入：hexo new post test1以创建一个标题名为test1的帖子。你可以在source/_posts/目录下看到它。 在文件顶部有着与source/categories/index.md和source/tags/index.md相同格式的配置，该类配置可拥有如下属性（comments属性必须保证已经安装了第三方服务后才能生效）： title: 文章的标题date: 创建日期，例如(2017-02-26 00:54:28)updated: 修改日期comments: 是否开启评论(true or false)type: 标签，多个时表示为([a, b, c])categories: 分类 修改创建格式 使用命令创建的帖子文件的格式，系源自于scaffolds/post.md，你可以通过修改它来达到帖子模板化的效果，例如： 后记 帖子文件的本质就是从模板产生的克隆品，所以也可以自己手动新建文件。同理删除帖子也只需要直接删除文件即可，无需通过网站管理之类的手段，非常方便。 发布网站前言 发布网站的原理其实就是生成网站文件夹并传输到GitHub上对应的仓库https://github.com/username/username.github.io, 然后便可通过https://username.github.io, 进行访问。 上传部署 在终端输入npm install hexo-deployer-git --save，安装完毕后打开站点配置文件，添加deploy字段。 deploy:type: gitrepository: http://github.com/username/username.github.io.gitbranch: master 注意事项 是http而非https。 在旧版(&lt;3.0)的Hexo里是github而非git。 username即你的GitHub用户名，实际以你自己创建的仓库地址为准。 生成并上传 在终端、博客工程目录下输入：hexo generate，完成后便会发现新增了public目录。那便是网站文件夹，用于上传到GitHub仓库。 接下来再输入hexo deploy，将网站文件夹上传到GitHub仓库。以后在本地做了修改后，便进行这两个操作将网站生成并上传即可。 后记 有时候把一些配置文件搞炸的时候或者上传有问题时，可以使用hexo clean来尝试修复。 如果觉得GitHub的传输速度过慢，可考虑修改host尝试能否增速，以下是一个江湖偏方： 151.101.88.249 github.global.ssl.fastly.Net]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>NPM</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
